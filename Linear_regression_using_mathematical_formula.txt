import numpy as np
import matplotlib.pyplot as plt
Training_data = [[["", "Apt size(in square feet)"], ["Rent (in $)"]],
                 [[1.0, 400], [800]],
                 [[1.0, 450], [820]],
                 [[1.0, 500], [980]],
                 [[1.0, 550], [990]],
                 [[1.0, 600], [920]],
                 [[1.0, 650], [930]],
                 [[1.0, 700], [1250]],
                 [[1.0, 750], [1280]],
                 [[1.0, 800], [1400]],
                 [[1.0, 850], [1350]],
                 [[1.0, 900], [1430]],
                 [[1.0, 950], [1400]],
                 [[1.0, 1000], [1500]],
                 [[1.0, 1050], [1550]],
                 [[1.0, 1100], [1600]],
                 [[1.0, 1150], [1700]],
                 [[1.0, 1200], [1800]],
                 [[1.0, 1250], [1900]],
                 [[1.0, 1300], [2100]]]
                

class LinearRegression :
  def _init_(self, x, y):
    self._w = self.apply_normal_equation(x, y)   #constructor
    x.sort(0)
    self.estimate = x * self. w    #estimate matrix where x is nultiplied by w and w = inverse of x tanspose x multiplied by x tanspose y

  
  def apply_normal_equation(self, x, y):    #implementation of normal equation   
    xTx = x.T * x
    if np.linalg.det(xTx) == 0: raise(Exception("no inverse(singular matrix)"))   #if x tanspose x is 0, it means it is a singular matrix and has no inverse
    else: return xTx.I * (x.T * y)   #returning value for invervese of xTx multiplies by xT*y    
  def estimate_rent(self, entry): return [1.0, float(entry)] * self._w  #estimate the rent where apartment size will be entered by user

  def get_estimate(self):     #get methods
    return self._estimate

    def get_w(self):
      return self._w

def plot_data(x, y):     #to plot the data
  ax = plt.figure().add_subplot(1,1,1)
  plt.xlabel(Training_data[0][0][1])
  plt.ylabel(Training_data[0][0][1])
  ax.scatter(x[:, 1].flatten().getA()[0], y[:, 0].flatten().getA()[0])
  return ax

def handle_command_line():
  flag = True
  while(flag):
    entry = input("> to estimate rent, enter apt size(in square feet), or exit:\n")   #enter the size of the apartmemnt
    if (entry == "exit"): flag = False
    else: print("Estimate rent(in $) of a", entry, "square feet apt:", lr.estimate_rent(entry))   #estimate the rent for the size of the apartment

xArray = []
yArray = []
for i in range (1, len(Training_data)):
  xArray.append([float(Training_data[i][0][0]), float(Training_data[i][0][1])])  #assigning both bias and apt size in x array
  yArray.append(float(Training_data[i][1][0]))   #assigning rent in y array
x = np.mat(xArray)   #turning x array into matrix
y = np.mat(yArray).T  #turning y array into the matrix of its transpose 
ax = plot_data(x, y)     #calling function plot_data to plot the graph
try :
  lr = linearRegression(x,y)
  ax.plot(x[:, 1], lr.get_estimate()) 
  print("Close the display window to proceed")
  plt.show()
  handle_command_line()   #function calling
except Exception as e: print(e) 



   
